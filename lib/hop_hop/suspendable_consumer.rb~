
class SuspendableConsumer < HopHop::Consumer

  cattr_accessor :suspend_message

  def self.suspend_on( message )
    bind message
    self.suspend_message = message
  end

  def self.resume_on( message )
    @wait_consumer = Class.new(HopHop::Consumer) do
      queue self.queue

      bind message

      def consume(event, info)
        exit_loop
      end
    end

    self.resume_message = message
  end

  def self.consume(options = {})
    while super(options)
      @wait_consumer.consume
    end
  end

  def consume(event, info)

    if event.name == self.class.suspend_message
      exit_loop
    end

    do_consume(event, info)

  end

end

